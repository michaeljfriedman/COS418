TODO

Fri 1/12:
* Re-familiarize with the assignment
* Design
* Implement nearly all of the server

Sat 1/13:
* Server: Add debug statements in the code you have so far
* Work on isDuplicate()

-----> YOU ARE HERE
- Need to catch edge case: Say I (server) get an op and call Start() for it,
  but it times out. So I tell the client to retry. A server will *not* reply
  to the client about an op unless there is an appliedCh for it at the time
  it is applied. So, if that retry reaches the leader before the op is
  finished/applied, then they'll get a reply. **But** if the op is applied
  *before* the retry reaches the leader, then the leader will not have an
  appliedCh for it. So he will think it's a duplicate, not Start(), and tell
  the client to retry. Other servers will deny it because they're not the
  leader. So the client will retry forever.
  - **Solution**
    - Server: Add a queue "applied back log", which keeps track of ops
    applied but not yet replied to the client.
      - When an op is applied, it is added to the back log if there isn't
        currently a outstanding appliedCh for it.
      - Replying the back log: Whenever the server replies to a client, it
        piggy-backs all ops in the back log as well as "successful".
      - Clearing the stale back log: Whenever a server receives an op from a
        client, also clear out all ops in the back log for which the client
        says it heard successful replies (see below).
    - Client: Maintain a list of ops you heard successful replies for. When a
      successful reply comes in, add the op to that list. Then, whenever a new
      op is requested, piggy-back all ops in this list as well.
      - NOTE: This list will grow without bound. Is this ok?


Sun 1/14:
- Write client
  - Design
  - Implement

- How to detect duplicates without checking the log? - put this off until part II
  - **Solution**. In server:
    - Allow duplicate entries to be Start()'ed, but don't *apply* them more
      than once.
    - Make a map: op id -> bool indicating applied/not applied.
    - Every time you receive an applied op from applyCh, if there is no entry
      for it in this map (i.e. it is not applied), then apply it and mark it
      applied.
    - Whenever you receive a client request, clear out all ops from this map
      for which the client says it heard successful replies (since this means
      it will not send retries anymore).
