Assignment 5 Key-Value Store - Server Design
============================================

Data types
----------

Op
- Key
- Value
- Type (Get/Put/Append)
- Id (client ID, op ID for that client)

RaftKV
- appliedChs (map: op ID -> string chan): Indicates if op was applied and I should
  send success reply to client
- appliedBackLog (map: op ID -> string): Stores result of the op if it was
  applied was not immediately returned to client due to timeout.
- isStarted (map: op ID -> bool): Indicates if op was started in raft, to detect
  duplicates.




Primary functions
-----------------

handleOp()
- (See Goroutines - Do Op)


Get()
- Call handleOp(Get)
- Reply to client with result from handleOp()


Put()
- Call handleOp(Put)
- Reply to client with result from handleOp()


Append()
- Call handleOp(Append)
- Reply to client with result from handleOp()


applyOps()
- (See Goroutines - Apply Ops)


Other functions
---------------

- getBackLog(): Returns subset of appliedBackLog that pertains to a particular
  client.
- removeFromBackLog(): Removes a set of op IDs from the back log.
- removeFromIsStarted(): Removes a set of op IDs from the isStarted map.


Goroutines
----------

Apply Ops -------------------------------------------->
- Loop:
  - Read from applyCh
  - Lock until end of loop
  - Apply op
  - If I have an op handler pending for this op ID,
    send "success" to it
  - Else, put op on back log

Handle Op (multiple occurrences) ------------------------->
- Remove completed ops from back log and from isStarted
  map.

- Check if op is in the back log. If it is, return the result
  immediately.
- Check if op has been started already. If so, return
  unsuccessful to client.
- Call Start() on raft.
- If it turns out I'm not leader, reply to client with failure.
- Otherwise:
  - Mark op started
  - Wait for result from Apply Ops, or timeout after 1s
    (ref: Piazza @254)
- If got a reply from Apply Ops, reply to client with
  success (and value, for a Get)
- Else reply to client with failure
