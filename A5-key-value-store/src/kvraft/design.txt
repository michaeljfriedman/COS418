Assignment 5 Key-Value Store - Design
=====================================

Data types
----------

Op
- Key
- Value
- Type (Get/Put/Append)
- Id (client ID, op ID for that client)

RaftKV
- Add appliedChs, map: op ID -> bool chan (indicates
  if op was applied and I should send success reply
  to client)



Primary functions
-----------------

handleOp()
- (See Goroutines - Do Op)


Get()
- Call handleOp(Get)
- Reply to client with result from handleOp()


Put()
- Call handleOp(Put)
- Reply to client with result from handleOp()


Append()
- Call handleOp(Append)
- Reply to client with result from handleOp()


applyOps()
- (See Goroutines - Apply Ops)


Other functions
---------------

- isDuplicate(): Checks whether an opId has already been Start()'ed/applied
- getBackLog(): Returns subset of appliedBackLog that pertains to a particular
  client.
- removeFromBackLog(): Removes a set of op IDs from the back log.


Goroutines
----------

Apply Ops -------------------------------------------->
- Loop:
  - Read from applyCh
  - Lock until end of loop
  - Apply op
  - If I have an op handler pending for this op ID,
    send "success" to it
  - Else, put op on back log

Do Op (multiple occurrences) ------------------------->
- Call Start() on raft if op ID is not in the log.
  Reply to client with failure if I'm not leader.
- (At this point, op ID must be in the log)
- Wait for result from Apply Ops, or timeout after 1s
  (ref: Piazza @254)
- If go a reply from Apply Ops, reply to client with
  success (and value, for a Get)
- Else reply to client with failure

- NOTE: In every reply, also piggy back all back-logged applied ops for that
  client, and remove them from the back log.
