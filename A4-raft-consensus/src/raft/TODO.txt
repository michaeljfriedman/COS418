Part I - Appending log entries and reaching consensus
-----------------------------------------------------

>>> Write in debug print statements as you go!


* Implement data types
  * Raft
    * Lock-able commitIndex/lastApplied (lock the whole Raft obj)
  * LogEntry
  * AppendEntriesArgs
  * AppendEntriesReply

* Implement Start(), "when I become leader" (easy)

* Interlude: Make separate debug flag for leader election and consensus

* Interlude: if log is indexed from 1, make sure first commit works

* Implement leader functions:
  * doConsensus()
  * applyLogEntries()
  * sendAppendEntries()  (overwrites old sendAppendEntries)
  * sendPeriodicHeartbeats()

* Implement follower functions:
  * AppendEntries()
  * logsMatchThrough()

- Debug tests:
  * TestBasicAgree
  * TestFailAgree
  * TestFailNoAgree
  * TestConcurrentStarts
  * TestRejoin
  - TestBackup
    * Whenever a leader/candidate gets a reply with a *later* term, step down
      and become a follower.
      * AppendEntries:
        * AppendEntries() should set reply.Term to rf.currentTerm at beginning,
          but if you also update your term, make sure to update reply.Term.
        * sendAppendEntries() should revert me to follower upon receiving
          "Stale" reply (no need to also reset votedFor though). After
          receiving reply, do everything *while locked*.
      * RequestVote:
        * RequestVote() should set reply.Term to rf.currentTerm at beginning
        * requestVoteFrom() should not set any values in reply. Just init
          an empty one.
        * runForLeader() should reset votedFor upon receiving any outcome,
          then do everything else the same, but *while locked*.
  - TestCount


Part II - Handling failures/persistence
---------------------------------------




Part III - Optimization
-----------------------


--------------------------------------------------------------------------------


Suggestions from listening at lab TAs:
--------------------------------------
- In general, any read of log-related data (log, commitIndex, lastApplied, etc.)
  requires a lock in advance.
- You can usually just lock an entire function, even if you only need the lock
  for part of it. They execute quickly anyway, so it doesn't cause much delay.
  But *don't* lock things that take a while to run:
  - When RPC is sent
  - for loops
  - Waiting for outcomes (e.g. consensusOutcome in doConsensus())
- In particular, lock entire AppendEntries handler


- You can't assume you remain the leader throughout an entire function,
  unless it's locked. If you're about to acquire a lock to do something
  leader-specific (e.g. apply entries in sendAppendEntries()), check that
  you're still leader before you do it.


- If you need to reference log size throughout a whole function, store it
  at the beginning and use that size, since it could change throughout the
  function.


What I can/should do now
------------------------
* Lock for doConsensus:
  * Start() should return nextIndex[rf.me] instead of len(rf.log)
  * doConsensus() should lock from beginning until entry has been appended to
    log, and nextIndex is updated

* Lock for elections:
  * Lock all of RequestVote()
  * Move "if rf.voterFor == NoOne" from waitForLeaderToDie() to runForLeader()
  * Lock runForLeader() from the if statement above until I've finished
    voting for myself

