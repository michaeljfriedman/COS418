Part I - Appending log entries and reaching consensus
-----------------------------------------------------

>>> Write in debug print statements as you go!


* Implement data types
  * Raft
    * Lock-able commitIndex/lastApplied (lock the whole Raft obj)
  * LogEntry
  * AppendEntriesArgs
  * AppendEntriesReply

* Implement Start(), "when I become leader" (easy)

* Interlude: Make separate debug flag for leader election and consensus

* Interlude: if log is indexed from 1, make sure first commit works

* Implement leader functions:
  * doConsensus()
  * applyLogEntries()
  * sendAppendEntries()  (overwrites old sendAppendEntries)
  * sendPeriodicHeartbeats()

* Implement follower functions:
  * AppendEntries()
  * logsMatchThrough()

- Debug tests:
  * TestBasicAgree
  * TestFailAgree
  - TestFailNoAgree
    - See err3-no-leader-elected.txt
  - TestConcurrentStarts
  - TestRejoin
  - TestBackup
  - TestCount
  - Remove AppendEntriesArgs Id attr and Raft appendEntriesId attr before moving on (?)

- Fix leader election bug?
  - At one point I got a failure in the second leader election test (from A3),
    where server 0 claimed to be leader even though no leader should have been
    elected... but this only happened once and never happened again. Weird...


Part II - Handling failures/persistence
---------------------------------------




Part III - Optimization
-----------------------



Suggestions from listening at lab TAs:
--------------------------------------
- In general, any read of log-related data (log, commitIndex, lastApplied, etc.)
  requires a lock in advance.
- You can usually just lock an entire function, even if you only need the lock
  for part of it. They execute quickly anyway, so it doesn't cause much delay.
  But *don't* lock things that take a while to run:
  - When RPC is sent
  - for loops
  - Waiting for outcomes (e.g. consensusOutcome in doConsensus())
- In particular, lock entire AppendEntries handler

- You can't assume you remain the leader throughout an entire function,
  unless it's locked. If you're about to acquire a lock to do something
  leader-specific (e.g. apply entries in sendAppendEntries()), check that
  you're still leader before you do it.

- If you need to reference log size throughout a whole function, store it
  at the beginning and use that size, since it could change throughout the
  function.
